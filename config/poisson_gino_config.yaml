default: &DEFAULT

  arch: 'gino'
  verbose: True
  n_params_baseline: None

  # Distributed computing
  distributed:
    use_distributed: False
    wireup_info: 'mpi'
    wireup_store: 'tcp'
    model_parallel_size: 2
    seed: 666

  # Dataset related
  data:
    batch_size: 1
    file: '/home/dave/data/nonlin_poisson/nonlinear_poisson.obj'
    n_train: 2 #7000
    n_test: 2 #100 #[48]
    n_in: 5000 # Input points per instance
    n_out: 100 # Output query points instance
    n_eval: 6000 # Points to evaluate on
    # train_out_res: 64 # Resolution of output GNO points' grid
    test_batch_sizes: [1] #16
    query_resolution: 64
    train_out_res: 400
    points_per_bc: 100
    padding: 1
    encode: True
    input_min: 1024
    input_max: 1024
    sample_random_in: None # Set to a certain percentage if we want to sample a static number of points. Will use the range otherwise
    sample_random_out: None

  checkpoint_dir: '../checkpoints/'
  checkpoint_name: 'PoissonMLPCheck'

  # Patching
  patching:
    levels: 0
    padding: 0
    stitching: False

  gino:
    data_channels: 3
    out_channels: 1
    res: False
    gno_coord_dim: 2
    gno_embed_channels: 32
    gno_embed_max_positions: 600
    in_gno_radius: 0.16
    out_gno_radius: 0.175
    gno_transform_type: 'nonlinear' # linear_kernelonly, linear, nonlinear_kernelonly, nonlinear
    gno_reduction: 'mean'
    gno_weighting_fn: 'cos' # 'bump', 'bump_sqrt', 'linear', 'tanh', 'cos', 'quadr', 'cubic', 'quartic'. 'quartic_sqrt', 'octic', 'octic_sqrt', None
    gno_wt_fn_scale: 0.030624999999999996
    gno_use_open3d: False
    in_gno_channel_mlp_hidden_layers: [256, 512, 256] #[40, 40], [512, 256]
    out_gno_channel_mlp_hidden_layers: [512, 1024, 512] #[40, 40], [512, 256]
    in_gno_tanh: None # None, 'in_p', 'latent_embed', 'both'
    out_gno_tanh: None # None, 'in_p', 'latent_embed', 'both'
    fno_n_modes: [20, 20] #[32, 32, 32] #just changed this trying next # try 16 along each dim?
    fno_hidden_channels: 64 #86
    fno_projection_channels: 256
    fno_n_layers: 4
    fno_use_mlp: True
    fno_norm: 'group_norm' # also tried 'ada_in', no difference found
    fno_ada_in_features: 8
    fno_factorization: None
    fno_rank: 0.8
    fno_domain_padding: 0. # 0625 #0.125
    fno_mlp_expansion: 1. #5 # 1.0 TODO: see if things improve when I set it to 1
    debug: False
  
  opt:
    n_epochs: 1000
    training_loss: ['equation', 'boundary']
    loss_weights: 
      mse : 1.
      equation: 0.01
      boundary: 1.
    loss_schedule: False
    loss_scale: 1.
    pino_method: 'autograd' # 'finite_difference', 'fdm_fourier_hybrid', 'autograd', 'FC_fourier_hybrid', 'FC'
    weight_decay: 1e-6 #1e-4 #1e-4 #0
    amp_autocast: False
    learning_rate: 1e-4
    optimizer: 'Adam'
    scheduler: 'ReduceLROnPlateau' # Or 'CosineAnnealingLR' OR 'ReduceLROnPlateau' or "StepLR"
    scheduler_T_max: 5000 # For cosine only, typically take n_epochs
    scheduler_patience: 2 # For ReduceLROnPlateau only
    gamma: 0.9
    precision_schedule: None
    

  # Weights and biases
  wandb:
    log: False
    name: Test-Time Optimization Poisson # If None, config will be used but you can override it here
    group: 'ry_lin' 
    project: "pino-update-poisson"
    entity: "NAME" # put your username here
    sweep: False
    log_output: True
    log_test_interval: 1